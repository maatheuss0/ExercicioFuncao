# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugYYnNWS4VB3otfpnZ_2CHqUQhxpY84i

# **Exemplo**
"""

def saudacao(nome):
 print('Olá', nome)

nome = input('Entre com seu nome: ')

saudacao(nome)

def area_triangulo(base, altura):
  area = base * altura / 2
  return area

# triangulo 1
base1 = 2 # cm
altura1 = 5 # cm
#triangulo 2
base2 = 4 # cm
altura2 = 6 # cm

print('Area do triangulo 1 = ', area_triangulo(base1, altura1), 'cm*cm')
print('Area do triangulo 2 = ', area_triangulo(base2, altura2), 'cm*cm')

def saudacao(nome, mensagem):
  print('Olá,', nome, '\b!', mensagem)

# Chamada da funcao com parametro posicionais
saudacao('Joao', 'Como voce está?')

# Chamada da funcao com parametros nomeados
saudacao(mensagem='Tudo bem?', nome='Maria')

def saudacao(nome, mensagem='Bom dia'):
  print('Olá,', nome, '\b!', mensagem)

# Chamada da funcao com parametro posicionais
saudacao('Ana')

# Chamada da funcao com parametros nomeados
saudacao('Pedro', 'Boa tarde!')

def quadrado(numero):
  return numero ** 2

resultado = quadrado(4)
print('O quadrado de 4 é', resultado)

def alterna(n):
  resultado = 0
  multi = 1
  i = 0
  for i in range(1 , n + 1):
    resultado = i * multi
    print(resultado, end=" ")
    multi *= -1
  print()
alterna(5)
alterna(9)
alterna(12)

def perimetro_triangulo(a, b):
  perimetro = (2 * a) + (2 * b)
  return perimetro

# triangulo
a =  2
b =  3

print('Perimeto do triangulo = ', perimetro_triangulo(a, b),'cm')

def soma_pn(valores):
  soma_p = 0 # soma dos numeros negativos
  soma_n = 0 # soma dos numeros negativos
  for n in valores:
    if n > 0:
      soma_p += n
    else:
      soma_n += n

  return soma_p, soma_n

valores = [2, -1, 3, -4]
soma_p, soma_n = soma_pn(valores)
print(f'Soma dos positivos = {soma_p}\nsoma dos negativos = {soma_n}')

def saudacao(txt):
  print(f'Olá {txt}!')

def area_triangulo(base, altura):
  area = base * altura / 2
  return area

def area_retangulo(lado1, lado2):
  area = lado1 * lado2
  return area

saudacao('Daniel')
at = area_triangulo(altura = 3, base = 4)
ar = area_retangulo(2 , 7)

print(f'Area do triangulo = {at}')
print(f'Area do retangulo = {ar}')

"""# **Exercícios**"""

def soma(a,b):
  soma = a+b
  return soma

def subtracao(a,b):
  subtracao = a-b
  return subtracao

def multiplicacao(a,b):
  multiplicacao = a*b
  return multiplicacao

def divisao(a,b):
  divisao = a/b
  return divisao

def potenciacao(a,b):
  potenciacao = a**b
  return potenciacao

def exibir_menu():
  print("Escolha a operacao")
  print('1. Adicao')
  print('2. Subtracao')
  print('3. Multiplicacao')
  print('4. Divisao')
  print('5. Potenciacao')

def calculadora():
  exibir_menu()
  opcao = input("Digite o número da operação desejada: ")
  a = int(input("Digite o número desejado : "))
  b = int(input("Digite o número desejado : "))

  if opcao in ('1'):
   res =  soma(a,b)
   print(res)
  elif opcao in ('2'):
   res = subtracao(a,b)
   print(res)
  elif opcao in ('3'):
   res = multiplicacao(a,b)
   print(res)
  elif opcao in ('4'):
   res = multiplicacao(a,b)
   print(res)
  elif opcao in ('5'):
   res = potenciacao(a,b)
   print(res)

  else:
    print("Opção inválida! Por favor, escolha uma opção válida.")

calculadora()

def validar_digito_verificador_1(digitos):
  soma_prod = 0
  for n in range(9):
    soma_prod += (digitos[n] * (10 - n))
  #print(f'soma_prod = {soma_prod}')
  d1 = ((soma_prod * 10) % 11) % 10
  #print(d1)
  return d1 == digitos[-2]

def validar_digito_verificador_2(digitos):
  soma_prod = 0
  for n in range(9):
   soma_prod += (digitos[n] * (10 - n))
  print(f'Soma dos produtos = {soma_prod}')
  d2 = ((soma_prod * 10) % 11) % 10
  # print(d2)
  return d2 == digitos[-1]

def validar_cpf(cpf):
  #print(f'cpf = {cpf}')
  cpf_list = [int(d) for d in cpf]
  #print(cpf_list)

  v1 = validar_digito_verificador_1(cpf_list)
  if v1 == False:
    return False
  v2 = validar_digito_verificador_1(cpf_list)
  if v2:
    return True
  else:
    return False
# Função principal para solicitar o CPF ao usuário e validar
def main():
  cpf = input("Digite o CPF (apenas números): ")
  if validar_cpf(cpf):
    print("CPF válido!")
  else:
    print("CPF inválido!")

# Chamando a função principal
main()

def gerar_digito_verificador_1(digitos):
# Implemente a lógica para validar o digito verificador 1
  soma_prod = 0
  for n in range(9):
    soma_prod += (digitos[n] * (10 - n))
  d1 = ((soma_prod * 10) % 11) % 10
  return d1

def gerar_digito_verificador_2(digitos):
  soma_prod = 0
  for n in range(9):
   soma_prod += (digitos[n] * (11 - n))
  d2 = ((soma_prod * 10) % 11) % 10
  return d2

def gerar_cpf(cpf):
  cpf_list = [int(d) for d in cpf]
  d1 = gerar_digito_verificador_1(cpf_list)
  d2 = gerar_digito_verificador_2(cpf_list)
  cpf_add = '{}.{}.{}-{}'.format(cpf[:3], cpf[3:6], cpf[6:9], cpf[9:]) + str(d1) + str(d2)
  return cpf_add

# Função principal para solicitar os 9 primeiros digitos do CPF e gerar os 2 digitos verificadores
def main():
  cpf9 = input("Digite os primeiros 9 digitos do CPF a ser gerado (apenas números): ")
  cpf = gerar_cpf(cpf9)
  print(f'CPF = {cpf}')

# Chamando a função principal
main()

